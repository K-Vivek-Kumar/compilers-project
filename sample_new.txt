About vivek (int) (int a, bool b, point c, line d, polygon[flex] e, polygon[5] j, circle f, ellipse g, triangle h, rectangle i) {
	b = a->d; ----------------------------------------------> returns bool, whether a is on b or not
	line a = [c, origin]; ----------------------------------> declares a line between point c and the origin
	point k = a # b; ---------------------------------------> returns intersection of a and b polygons
	e = f # g; ---------------------------------------------> returns set of points as a polygon, from circle and ellipse intersection
	e = h # i; ---------------------------------------------> returns set of points as a intersection of triangle, `h` and rectangle, `i`
	--------------------------------------------------------> # is like a intersection operators for two graphs
	line p = a.perp_bisec();--------------------------------> returns perpendicular bisector of a line
	polygon[4] x = [c, origin, (9, 7), (8, a)]; ------------> declares a four sided polygon with the following points
	real c = a--b; -----------------------------------------> returns the distance between line a and point b
}

SVAS { ---------------------------------------------------------> Main function
	int k = [3 > 4]Get vivek()? Get vivek() + 2; -----------> Calls the functions vivek
	loop (true) { ------------------------------------------> Loop (condition)
		k = k + 1;
	}
	if (true) {
		k = k + 1; -------------------------------------> Only works if condition is true
	}
	else if (false) {
		------------------------------------------------> Add statements
	}
	else {
		k = 0;
	}
	print(k); ----------------------------------------------> Prints k
	a.show(); ----------------------------------------------> Use to print complex datatypes
}
